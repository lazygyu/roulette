// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // 데이터베이스 공급자를 postgresql로 설정
  url      = env("DATABASE_URL")
}

enum GameStatus {
  WAITING
  IN_PROGRESS
  FINISHED
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique // username은 고유해야 합니다.
  nickname  String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]   // 사용자가 관리하는 방 목록 (1:N 관계)
}

model Room {
  id        Int      @id @default(autoincrement())
  managerId Int      // manager_id 필드 이름 변경 (Prisma 컨벤션)
  name      String
  password  String?  // 비밀번호는 선택 사항
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? // 소프트 삭제를 위한 필드 추가
  manager   User     @relation(fields: [managerId], references: [id]) // User 모델과의 관계 설정
  game      Game?    // Room과 Game의 1:1 관계

  @@index([managerId]) // managerId에 인덱스 추가
}

model Game {
  id          Int        @id @default(autoincrement())
  roomId      Int        @unique // Room 외래 키, 방당 하나의 게임만 허용
  room        Room       @relation(fields: [roomId], references: [id])
  status      GameStatus @default(WAITING) // 게임 상태 (Enum 사용)
  mapIndex    Int?       // 설정된 맵 인덱스
  marbles     String[]   // 설정된 마블 이름 목록
  winningRank Int?       // 설정된 우승 순위
  speed       Float?     // 설정된 게임 속도
  // ranking     Json?      // 최종 순위 (종료 시 저장) -> GameRanking 모델로 대체
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  rankings    GameRanking[] // Game과 GameRanking 간의 1:N 관계
}

// 새로운 GameRanking 모델 추가
model GameRanking {
  id         Int      @id @default(autoincrement())
  gameId     Int      // Game 모델과의 외래 키
  game       Game     @relation(fields: [gameId], references: [id], onDelete: Cascade) // 게임 삭제 시 관련 랭킹도 삭제
  marbleName String   // 마블 이름
  rank       Int      // 순위
  isWinner   Boolean  @default(false) // 최종 승자 여부
  createdAt  DateTime @default(now())

  @@unique([gameId, rank]) // 한 게임 내에서 순위는 고유해야 함
  @@index([gameId])        // gameId로 인덱싱
}
